---
- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/vpc.yaml
  - group_vars/bastion.yaml
  - group_vars/docker_registry.yaml
  tasks:

  # find vpc id
  - name: find vpc id
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      subnets: "{{ vpc_subnets }}"
      wait: true
    register: vpc

  # delete NAT gateway & Elastic IP

  - name: get vpc public subnets
    set_fact:
      vpc_public_subnets_full: "{{ vpc.subnets | get_subnets_full('tier', 'public') }}"

  - name: get NAT gateway id using subnet id
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: yes
      subnet_id: "{{ vpc_public_subnets_full[0].id }}"
      state: absent
    register: nat_gateways_info
    ignore_errors: yes

  - name: delete NAT gateways
    ec2_vpc_nat_gateway:
      state: absent
      nat_gateway_id: "{{ nat_gateways_info.nat_gateway_id }}"
      release_eip: true
      wait: yes
    ignore_errors: yes

  # delete bastion machines
  - name: remove autoscale groups for bastion
    ec2_asg:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      launch_config_name: "{{ item.lc_name }}"
      state: absent
    with_items:
      - { name: "{{ bastion_asg_name }}", lc_name: "{{ bastion_lc_name }}" }
    ignore_errors: yes

  - name: remove launch configurations for bastion
    ec2_lc:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      instance_type: "{{ item.type }}"
      state: absent
    with_items:
      - { name: "{{ bastion_lc_name }}", type: "{{ bastion_instance_type }}" }
    ignore_errors: yes

  # delete Docker registry machines

  - name: get docker-registry instances
    ec2_remote_facts:
      region: "{{ ec2_region }}"
      filters:
        vpc-id: "{{ vpc.vpc_id }}"
        instance-state-name: running
        tag:Name: docker-registry
    register: docker_registry_data
    ignore_errors: yes

  - name: terminate docker-registry instances
    ec2:
      region: "{{ ec2_region }}"
      state: absent
      instance_ids: "{{ item.id }}"
      wait: yes
    with_items: "{{ docker_registry_data.instances }}"

  # delete DNS zone
  - route53:
      command: get
      zone: "{{ vpc_dns_zone }}"
      private_zone: True
      record: "docker-registry.{{ vpc_dns_zone }}"
      type: A
    register: rec
    ignore_errors: yes
  - debug: msg="{{ 'set' in rec and rec.set | length > 0 }}"
  - name: delete DNS records
    route53:
      command: delete
      zone: "{{ vpc_dns_zone }}"
      private_zone: True
      record: "{{ rec.set.record }}"
      ttl: "{{ rec.set.ttl }}"
      type: "{{ rec.set.type }}"
      value: "{{ rec.set.value }}"
    when: "{{ 'set' in rec and rec.set | length > 0 }}"
  - name: discover DNS zone
    local_action: "command aws route53 list-hosted-zones-by-name --dns-name {{ vpc_dns_zone }} --max-items 2 --output json"
    register: list_zones_result_out
  - set_fact:
      dns_zone: "{{ list_zones_result_out.stdout | from_json | get_dns_zone(vpc_dns_zone + '.') }}"
  - name: delete DNS zone
    local_action: "command aws route53 delete-hosted-zone --id {{ dns_zone.Id }} --output json"
    when: dns_zone != ""
    ignore_errors: yes

  # delete security groups
  - name: delete all security groups
    ec2_group:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
    with_items:
      - { name: "{{ bastion_security_group.name }}" , description: "{{ bastion_security_group.desc }}"}
      - { name: "{{ docker_registry_security_group.name }}" , description: "{{ docker_registry_security_group.desc }}"}
    ignore_errors: yes

  # delete VPC
  - name: delete VPC
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
