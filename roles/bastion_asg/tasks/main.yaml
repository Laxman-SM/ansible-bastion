# generate VPC security group
- name: Create the security group for the VPC
  ec2_group:
    name: "{{ bastion_security_group.name }}"
    description: "{{ bastion_security_group.desc }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ bastion_security_group.rules }}"
  register: bastion_sg

# search for latest Ubintu LTS image
- name: search for the latest Ubuntu server AMI image
  ec2_ami_find:
    region: "{{ ec2_region }}"
    name: "{{ bastion_image_name }}"
    virtualization_type: hvm
    sort: name
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: find_out

- name: save Ubuntu AMI
  set_fact:
    ubuntu_ami: "{{ find_out.results[0] }}"

# get existing bastion autoscale group
- name: get existing Bastion ASG
  ec2_asg_facts:
    name: "{{ bastion_asg_name }}"
    region: "{{ ec2_region }}"
  register: bastion_asg_info

# create bastion launch configuration
- name: create Bastion LC
  ec2_lc:
    name: "{{ bastion_lc_name }}"
    region: "{{ ec2_region }}"
    key_name: "{{ bastion_keypair_name }}"
    image_id: "{{ ubuntu_ami.ami_id }}"
    security_groups: ["{{ bastion_sg.group_id }}"]
    instance_type: "{{ bastion_instance_type }}"
    assign_public_ip: yes
    instance_monitoring: yes
    volumes:
      - device_name: /dev/sda1
        volume_type: standard
        volume_size: "{{ bastion_volume_size }}"
        delete_on_termination: true
  register: lc_info

# terminate previous instances of bastion ASG when LC changed
- name: terminate previous Bastion ASG instances, if LC changed
  ec2:
    region: "{{ ec2_region }}"
    state: absent
    instance_ids: "{{ item.instance_id }}"
    wait: yes
  with_items: "{{ bastion_asg_info.instances }}"
  when:
    - not (bastion_asg_info.instances is undefined)
    - lc_info.changed

# create bastion autoscale group
- name: create Bastion ASG
  ec2_asg:
    name: "{{ bastion_asg_name }}"
    region: "{{ ec2_region }}"
    launch_config_name: "{{ bastion_lc_name }}"
    health_check_period: "{{ bastion_health_check_period }}"
    desired_capacity: "{{ bastion_cluster_size }}"
    min_size: "{{ bastion_min_cluster_size }}"
    max_size: "{{ bastion_max_cluster_size }}"
    tags: "{{ bastion_instance_tags }}"
    vpc_zone_identifier: "{{ vpc_public_subnets }}"
    wait_for_instances: yes
  register: asg_out
