# provision docker registry
- name: Create the security group for the CoreOS cluster
  ec2_group:
    name: "{{ docker_registry_security_group.name }}"
    description: "{{ docker_registry_security_group.desc }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ docker_registry_security_group.rules }}"
  register: docker_registry_sg

# search for latest CoreOS AMI from alpha/beta/stable channel
- name: search for the latest CoreOS AMI image from "{{ coreos_channel }}"
  ec2_ami_find:
    region: "{{ ec2_region }}"
    name: "CoreOS-{{coreos_channel}}-{{coreos_version}}-hvm"
    virtualization_type: hvm
    sort: name
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: find_out

- name: get CoreOS AMI
  set_fact:
    coreos_ami: "{{ find_out.results[0] }}"

# generate user-data from template
- name: load user-data content
  set_fact:
    user_data: "{{ lookup('file', 'roles/docker_registry/templates/user-data.j2') }}"

# create a docker registry in each availability zone
- ec2:
    region: "{{ ec2_region }}"
    key_name: "{{ docker_registry_keypair_name }}"
    image: "{{ coreos_ami.ami_id }}"
    group_id: "{{ docker_registry_sg.group_id }}"
    instance_type: "{{ docker_registry_instance_type }}"
    wait: yes
    count: 1
    vpc_subnet_id: "{{ item.id }}"
    zone: "{{ item.az }}"
    instance_tags: "{{ docker_registry_instance_tags }}"
    monitoring: yes
    user_data: "{{ user_data }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: standard
        volume_size: "{{ docker_registry_volume_size }}"
        delete_on_termination: true
  register: ec2_out
  with_items: "{{ vpc_private_subnets_full }}"

# get IPs of registries in a list
- set_fact:
    registry_ip: "{{ item.instances[0].private_ip }}"
  with_items: "{{ ec2_out.results }}"
  register: registry_ip_out
- set_fact:
    registry_ips: "{{ registry_ip_out.results | map(attribute='ansible_facts.registry_ip') | list | join(',') }}"

- name: setup docker-registry DNS records
  route53:
    command: create
    vpc_id: "{{ vpc.vpc_id }}"
    private_zone: True
    zone: "{{ vpc_dns_zone }}"
    hosted_zone_id: "{{ zone_out.set.zone_id }}"
    record: "docker-registry.{{ vpc_dns_zone }}"
    type: A
    value: "{{ registry_ips }}"
    ttl: 7200
